Okay, let's outline a clear development strategy and detailed instructions for modifying the `registro` library to enhance its adaptability, particularly regarding pattern configuration.

**Development Strategy:**

1.  **Goal:** Make `registro` highly configurable so that validation patterns (RID components, API names) and reserved words can be easily customized per project without modifying the core library code.
2.  **Approach:** Centralize configuration within the `registro.config.settings` object. Modify core modules (`models/patterns.py`, `models/rid.py`, `core/resource_base.py`) to read configurations from `settings` instead of using hardcoded values. Introduce helper methods in `settings` for managing compiled patterns.
3.  **Testing:** Ensure existing functionality remains intact with default settings. Add new tests specifically for the configuration override mechanisms.
4.  **Documentation:** Update documentation (READMEs, docstrings) to explain the new configuration options and how to use them.
5.  **Application (`ontologia`):** Update the `ontologia` project to utilize the new configuration capabilities of the modified `registro` library.

**Detailed Task Breakdown:**

---

**Phase 1: Enhance `registro.config.settings`**

*   **Where:** `registro/config/settings.py`
*   **Why:** To create a central point for defining and overriding patterns and reserved words.
*   **How:**
    1.  **Add Pattern Attributes:**
        *   Add private attributes (`_pattern_...`) to the `Settings` class to store the *string* representations of all necessary regex patterns currently defined in `models/patterns.py` and `models/rid.py`.
            *   `_pattern_rid_prefix`: Default `r"^[a-z][a-z0-9-]{0,9}$"`
            *   `_pattern_service`: Default `r"^[a-z][a-z-]{0,49}$"`
            *   `_pattern_instance`: Default `r"^[a-z0-9][a-z0-9-]{0,49}$"`
            *   `_pattern_type`: Default `r"^[a-z][a-z-]{1,49}$"`
            *   `_pattern_locator`: Default `r"^[0-9A-HJ-KM-NPQRSTVWXYZ]{26}$"`
            *   `_pattern_api_name_object_type`: Default `r"^(?=.{1,100}$)[A-Z][A-Za-z0-9]*$"`
            *   `_pattern_api_name_link_type`: Default `r"^(?=.{1,100}$)[a-z][A-Za-z0-9]*$"`
            *   `_pattern_api_name_action_type`: Default `r"^(?=.{1,100}$)[A-Za-z][A-Za-z0-9_-]*$"`
            *   `_pattern_api_name_query_type`: Default `r"^(?=.{1,100}$)[a-z][A-Za-z0-9]*$"`
            *   *(Add others as needed, e.g., `_pattern_api_name_property_type` if `ontologia` requires it)*
    2.  **Load from Environment:** In the `_initialize` method, load overrides for these pattern strings from corresponding environment variables (e.g., `REGISTRO_PATTERN_SERVICE`, `REGISTRO_PATTERN_API_NAME_OBJECT_TYPE`).
    3.  **Add Reserved Words Attribute:**
        *   Add a private attribute `_reserved_words` initialized with the default set currently in `models/patterns.py`.
        *   In `_initialize`, load overrides from an environment variable (e.g., `REGISTRO_RESERVED_WORDS`, perhaps a comma-separated string) and convert it to a `Set[str]`.
    4.  **Add API Name Pattern Mapping:**
        *   Add a private attribute `_api_name_patterns_by_type` initialized with the default mapping (resource\_type string -> pattern *name* string, as discussed previously).
            ```python
            self._api_name_patterns_by_type = {
                "object-type": "API_NAME_OBJECT_TYPE", 
                "link-type": "API_NAME_LINK_TYPE",
                "action-type": "API_NAME_ACTION_TYPE",
                "query-type": "API_NAME_QUERY_TYPE",
                "default": "API_NAME_ACTION_TYPE" 
            }
            ```
        *   In `_initialize`, potentially load overrides for this mapping (e.g., from a JSON string in an environment variable `REGISTRO_API_NAME_MAPPING`).
    5.  **Add Pattern Management Methods/Properties:**
        *   Add a private dictionary `_compiled_patterns_cache: Dict[str, Pattern[str]] = {}` for caching.
        *   Create a method `get_pattern_string(self, name: str) -> Optional[str]`: Retrieves the *string* pattern associated with a given name (e.g., "SERVICE", "API_NAME_OBJECT_TYPE") from the private attributes. Returns `None` if the name is invalid.
        *   Create a method `get_compiled_pattern(self, name: str) -> Optional[Pattern[str]]`: Retrieves the compiled regex pattern. It should use `get_pattern_string` and `re.compile`, caching the result in `_compiled_patterns_cache`. Handle potential `re.error`. Returns `None` if the pattern string is invalid or compilation fails.
        *   Create a method `set_pattern(self, name: str, pattern_string: str)`: Allows programmatically setting/overriding a pattern string. Should clear the specific entry from `_compiled_patterns_cache`. Perform basic validation on `pattern_string`.
        *   Create a property `RESERVED_WORDS(self) -> Set[str]`: Returns `self._reserved_words`. Add a setter for programmatic override if desired.
        *   Create a property `API_NAME_PATTERNS_BY_TYPE(self) -> Dict[str, str]`: Returns `self._api_name_patterns_by_type`. Add a setter for programmatic override.

---

**Phase 2: Update `registro.models.patterns`**

*   **Where:** `registro/models/patterns.py`
*   **Why:** To remove hardcoded patterns and rely on the configuration.
*   **How:**
    1.  **Remove Pattern Constants:** Delete the `re.compile` constants (`SERVICE_PATTERN`, `INSTANCE_PATTERN`, `TYPE_PATTERN`, `LOCATOR_PATTERN`, `OBJECT_TYPE_API_NAME_PATTERN`, etc.). Keep the docstrings associated with the *original* patterns as comments or module-level documentation for reference.
    2.  **Remove `RESERVED_WORDS` Constant:** Delete the hardcoded set.
    3.  **Update `validate_string`:**
        *   Ensure it accepts `pattern: Pattern[str]` and `reserved_words: Optional[Set[str]]` as required arguments.
        *   Remove the default value for `reserved_words`. The caller will now be responsible for passing `settings.RESERVED_WORDS` or a derived set.
    4.  **Remove `get_rid_pattern`:** This logic will move to `rid.py` and use `settings`.

---

**Phase 3: Update `registro.models.rid`**

*   **Where:** `registro/models/rid.py`
*   **Why:** To make RID component validation use the configured patterns and reserved words.
*   **How:**
    1.  **Import `settings`:** Add `from registro.config import settings`.
    2.  **Update `ConstrainedStr` Subclasses (`ServiceStr`, `InstanceStr`, `TypeStr`, `LocatorStr`):**
        *   Remove the hardcoded `pattern` and `reserved_words` ClassVars.
        *   Implement `_get_pattern(cls) -> Pattern[str]` classmethod: Fetches the appropriate compiled pattern from `settings` (e.g., `settings.get_compiled_pattern("SERVICE")`). Raise `ValueError` if not found.
        *   Implement `_get_reserved_words(cls) -> Set[str]` classmethod:
            *   Define `allowed_exceptions: ClassVar[Set[str]] = set()` on each subclass as needed (e.g., `{"ontology"}` on `ServiceStr`).
            *   Fetch `settings.RESERVED_WORDS`.
            *   Return `settings.RESERVED_WORDS - cls.allowed_exceptions`. For `LocatorStr`, it might just return an empty set or `None`.
        *   Modify `validate(cls, v, info)`: Call `validate_string(v, cls._get_pattern(), cls._get_reserved_words(), cls.__name__)`. Adapt `LocatorStr.validate` if it has extra logic beyond the basic pattern/reserved word check.
        *   Modify `__get_pydantic_core_schema__`: Use `cls._get_pattern().pattern` for the schema's pattern string.
    3.  **Update `RID` Class:**
        *   Modify `validate(cls, v, info)`:
            *   Get the dynamic RID pattern string using `settings`: `prefix = re.escape(settings.RID_PREFIX); service_p = settings.get_pattern_string("SERVICE"); ...` Reconstruct the full pattern string dynamically. Compile it: `rid_pattern = re.compile(full_pattern_string)`.
            *   Validate `v` against this `rid_pattern`.
            *   When validating components (`prefix`, `service`, `instance`, `type_`, `locator`), call the respective `ConstrainedStr.validate` methods (e.g., `ServiceStr.validate(service, info)`).
        *   Modify `generate(...)`:
            *   Fetch defaults for `service` and `instance` from `settings.DEFAULT_SERVICE` and `settings.DEFAULT_INSTANCE`.
            *   Validate input `service`, `instance`, `type_`, `locator` using their respective `ConstrainedStr.validate` methods.
            *   Construct the RID string using `settings.RID_PREFIX`.
        *   Modify `__get_pydantic_core_schema__`: Generate the pattern dynamically based on `settings` as done in `validate`.
    4.  **Update RID Prefix Validation:** Modify the module-level validation check for `settings.RID_PREFIX` (currently in `rid.py`'s global scope) to use `settings.get_compiled_pattern("RID_PREFIX")`.

---

**Phase 4: Update `registro.core.resource_base`**

*   **Where:** `registro/core/resource_base.py`
*   **Why:** To make API name validation use the configured mapping and patterns.
*   **How:**
    1.  **Import `settings`:** Add `from registro.config import settings`.
    2.  **Modify `validate_api_name(cls, v, info)`:**
        *   Get `resource_type` from `rid` or `cls.__resource_type__`.
        *   Look up the `pattern_name` in `settings.API_NAME_PATTERNS_BY_TYPE` using `resource_type` (handle default).
        *   Fetch the compiled `pattern` using `settings.get_compiled_pattern(pattern_name)`. Handle errors if the pattern isn't found in settings.
        *   Call `validate_string(v, pattern, settings.RESERVED_WORDS, "api_name")`.

---

**Phase 5: Update `registro.core.resource`**

*   **Where:** `registro/core/resource.py`
*   **Why:** To use configured defaults and prefix.
*   **How:**
    1.  **Import `settings`:** Add `from registro.config import settings`.
    2.  **Modify `__init__` and `generate_rid`:** Use `settings.DEFAULT_SERVICE`, `settings.DEFAULT_INSTANCE`, and `settings.RID_PREFIX` instead of hardcoded fallbacks or the old `os.getenv`.
    3.  **Modify `check_rid_consistency`:** Compare `rid_parts[0]` against `settings.RID_PREFIX`.

---

**Phase 6: Testing & Documentation**

*   **Testing:**
    *   Run existing tests to ensure backward compatibility with default settings.
    *   Add new tests that specifically:
        *   Override pattern settings (via `settings.set_pattern`) and verify validation uses the new patterns.
        *   Override `RESERVED_WORDS` and check validation.
        *   Override `API_NAME_PATTERNS_BY_TYPE` and verify `validate_api_name` uses the correct patterns.
        *   Override `RID_PREFIX` and test RID generation/validation.
        *   Test environment variable overrides for settings.
*   **Documentation:**
    *   Update `README.md` explaining the new configuration options (environment variables, programmatic setting).
    *   Update docstrings in `settings.py`, `patterns.py`, `rid.py`, and `resource_base.py` to reflect the changes and explain configurable aspects.
    *   Clearly document the default patterns and reserved words.

---

**Instructions for Developers:**

"Team, we are refactoring the `registro` library to make its validation patterns (for RIDs and API names) and reserved words configurable per project. This will allow us to easily adapt `registro` for the `ontologia` project and others.

**Goal:** Move hardcoded patterns and reserved words into the `registro.config.settings` object and update the core modules to read from this configuration.

**Tasks:**

1.  **Enhance `settings.py`:** Add attributes and methods to manage pattern strings, compiled patterns, reserved words, and the API name pattern mapping. Implement loading from environment variables. (See Phase 1 details).
2.  **Refactor `patterns.py`:** Remove hardcoded `re.compile` constants and the `RESERVED_WORDS` set. Update `validate_string` to accept patterns/reserved words as arguments. (See Phase 2 details).
3.  **Refactor `rid.py`:** Update `ConstrainedStr` subclasses and the `RID` class to fetch patterns/reserved words from `settings`. Implement dynamic pattern generation/validation based on `settings`. Update RID prefix validation. (See Phase 3 details).
4.  **Refactor `resource_base.py`:** Update `validate_api_name` to use the configurable mapping (`settings.API_NAME_PATTERNS_BY_TYPE`) and fetch patterns from `settings`. (See Phase 4 details).
5.  **Refactor `resource.py`:** Update RID generation/validation to use `settings` for defaults and the prefix. (See Phase 5 details).
6.  **Add Tests:** Create new pytest tests verifying the configuration override mechanisms work correctly for patterns, reserved words, and mappings. Ensure existing tests pass with defaults.
7.  **Update Docs:** Modify READMEs and docstrings to reflect the new configuration capabilities.

Please refer to the detailed breakdown for specific implementation steps for each phase. Ensure code remains clean, well-documented, and backward compatible when using default settings. Coordinate changes to avoid conflicts."