**Task 3: Refactor `InstanceStr`**

*   **File:** `registro/models/rid.py`
*   **Why:** Similar to `ServiceStr`, remove hardcoded rules and define exceptions dynamically based on `settings`.
*   **How:**
    1.  Remove `pattern` and `reserved_words` ClassVars.
    2.  Define `allowed_exceptions` to dynamically include `settings.DEFAULT_INSTANCE`.

*   **Code Changes:**

    ```python
    class InstanceStr(ConstrainedStr):
        """
        String type for the 'instance' component of a RID.
        Uses pattern 'INSTANCE' from settings. Allows settings.DEFAULT_INSTANCE
        even if it's in the reserved words list.
    
        Example:
            >>> InstanceStr.validate("main")  # Valid
            'main'
            >>> InstanceStr.validate("Main")  # Raises ValueError
        """
        # REMOVE these lines:
        # pattern: ClassVar[Pattern[str]] = INSTANCE_PATTERN
        # reserved_words: ClassVar[Set[str]] = RESERVED_WORDS - {settings.DEFAULT_INSTANCE}
    
        # Define allowed exceptions dynamically
        @classmethod
        def _get_reserved_words(cls) -> Set[str]:
            """Get reserved words, allowing the configured DEFAULT_INSTANCE."""
            base_reserved_words = settings.RESERVED_WORDS
            # Dynamically exclude the default instance name
            return base_reserved_words - {settings.DEFAULT_INSTANCE}
    
    ```

---

**Task 4: Refactor `TypeStr`**

*   **File:** `registro/models/rid.py`
*   **Why:** Remove hardcoded rules and define its specific set of allowed exceptions.
*   **How:**
    1.  Remove `pattern` and `reserved_words` ClassVars.
    2.  Define the specific `allowed_exceptions` set for common resource types.

*   **Code Changes:**

    ```python
    class TypeStr(ConstrainedStr):
        """
        String type for the 'type' component of a RID.
        Uses pattern 'TYPE' from settings. Allows common type names
        even if they are in the reserved words list.
    
        Example:
            >>> TypeStr.validate("user")  # Valid
            'user'
            >>> TypeStr.validate("User")  # Raises ValueError
        """
        # REMOVE these lines:
        # pattern: ClassVar[Pattern[str]] = TYPE_PATTERN
        # reserved_words: ClassVar[Set[str]] = RESERVED_WORDS - { ... }
    
        # Define the specific exceptions for this type
        allowed_exceptions: ClassVar[Set[str]] = {
            "resource", "object", "link", "action", "query", "property-type", "object-type" # Be explicit
        }
        # It will use the base _get_reserved_words which subtracts these exceptions
    
    ```